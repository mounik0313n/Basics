# -*- coding: utf-8 -*-
"""internship-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/mounik0313n/a294189ae4b6c93c84c3ff4b325d1c38/internship-1.ipynb
"""

print("hello")

a = input("Enter your name: ")
print("hello"+" "+a)

#finding min and max value
def max(a,b,c):
  if a>b and a>c:
    return a
  elif b>a and b>c:
    return b
  else:
    return c
def min(a,b,c):
  if a<b and a<c:
    return a
  elif b<a and b<c:
    return b
  else:
    return c
print(max(1,2,3))

#functions for basic mathematical operations
def sum_add(*num):
  return sum(num)
def subtract(a,b):
  return a-b
def multiply(a,b):
  return a*b
def divide(a,b):
  return a/b
print(sum_add(1,2,3,4,5))

#usage of if else and basic operations
num1 = input("enter 1st number: ")
num2 = input("enter 2nd number: ")
print("1.sum \n 2.difference \n 3.dividion \n 4. multiplication")
op = input("choose option:")
if op == "1":
  print(int(num1)+int(num2))
elif op == "2":
  print(int(num1)-int(num2))
elif op == "3":
  print(int(num1)/int(num2))
elif op == "4":
  print(int(num1)*int(num2))
else :
  print("invalid")
print("Thank you")

#default keyword argrumnet
def add(a,b,c=0):
  return a+b+c
print(add(1,2))

#lambda function
add = lambda a,b:a+b
print(add(1,2))

#map function triple
num1 = [1,2,3,4,5]
num2 = list(map(lambda x:x**3,num1))
print(num2)

#recursion
def factorial(n):
  if n==1:
    return 1
  else:
    return n*factorial(n-1)
print(factorial(5))

#nested function
def outer():
  def inner():
    print("inner function")
  inner()
outer()

#calculating area and perimeter for square, rectangle, triangle, circle
def area(a):
  return a**2
def perimeter(a):
  return 4*a

def triangle(b,h):
  return 0.5*b*h
def circle(r):
  return 3.14*r**2
def rectangle(l,b):
  return l*b
def square(s):
  return s**2
print("1.square \n 2.rectangle \n 3.triangle \n 4.circle")
op = input("enter operation: ")
num1 = input("enter 1st number: ")
if op == "1":
  print(square(int(num1)))
elif op == "2":
  num2 = input("enter 2nd number: ")
  print(rectangle(int(num1),int(num2)))
elif op == "3":
  num2 = input("enter 2nd number: ")
  print(triangle(int(num1),int(num2)))
elif op == "4":
  print(circle(int(num1)))
else :
  print("invalid")

#function to reverse
def reverse(s):
  return s[::-1]
a= input("enter string: ")
print(reverse(a))

#counting the occurence
def count(a):
  count = {}
  for i in a:
    if i in count:
      count[i]+=1
    else:
      count[i]=1
  return count

  print(count("apple"))

"""Basic OOps concept"""

#basic class syntax
class Employee:
  pass
obj = Employee()
print(obj)

class LPU:
  def __init__(self, name, class1, address):
    self.name = name
    self.class1 = class1
    self.address = address

obj = LPU("abc", "xyz", "pqr")

print("Name:", obj.name)
print("Class:", obj.class1)
print("Address:", obj.address)

#encapsulation
class LPU:
  def __init__(self, name, class1, address):
    self.name = name
    self.class1 = class1
    self.address = address

#inheritance
class LPU:
  def __init__(self, name, class1, address):
    self.name = name
    self.class1 = class1
    self.address = address
class Student(LPU):
  def __init__(self, name, class1, address, rollno):
    super().__init__(name, class1, address)
    self.rollno = rollno
obj = Student("abc", "xyz", "pqr", 123)
print(obj.name)
print(obj.class1)
print(obj.address)
print(obj.rollno)